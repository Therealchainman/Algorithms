"""
For this problem there seems to always be 2^n solutions which you can get by doing 1<<n
hint, hint a trick.  
So using binary you can get all the possible results.  This is an amazing solution in my opinion.

Returns the number of distinct sums that can be generated by taking all subsequence combinations
of the array. 

"""
def distinctSubsequenceSums(arr):
	n = len(arr)
	total = 0
	seen = set()
	for i in range(1, 1 << n):
		s = 0
		for j in range(n):
			if i & (1 << j) > 0:
				s += arr[j]
		seen.add(s)
	return len(seen)
